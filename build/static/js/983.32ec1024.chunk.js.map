{"version":3,"file":"static/js/983.32ec1024.chunk.js","mappings":"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","sources":["components/placeholders/ResPlaceholder.js","pages/RestaurantsListing.js"],"sourcesContent":["import {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Skeleton,\r\n  Typography\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst ResPlaceholder = ({ number }) => {\r\n  const n = number;\r\n  return [...Array(n)].map((elem, index) => (\r\n    <span key={index}>\r\n      <Card\r\n        variant=\"outlined\"\r\n        sx={{\r\n          maxWidth: 365,\r\n          borderRadius: \"15px\",\r\n          marginRight: \"5px\",\r\n          marginBottom: \"10px\",\r\n          marginTop: \"10px\",\r\n          transition: \"transform 0.3s, border 0.3s\",\r\n          \"&:hover\": {\r\n            transform: \"translateY(-2px)\"\r\n          }\r\n        }}\r\n      >\r\n        <CardContent className=\"product-card-content\">\r\n          <div className=\"restaurant-img-wrapper\">\r\n            <CardMedia height=\"200\">\r\n              <Skeleton variant=\"rectangular\" width={250} height={170} />\r\n            </CardMedia>\r\n          </div>\r\n          <Typography variant=\"h6\" component=\"h6\" className=\"bold\" color=\"#000\">\r\n            <Skeleton />\r\n          </Typography>\r\n          <CardActions sx={{ padding: \"0\", marginBottom: \"10px\" }}>\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              component=\"h6\"\r\n              sx={{ flexGrow: 1 }}\r\n              color=\"#000\"\r\n            >\r\n              <Skeleton height={10} />\r\n              <Skeleton height={10} />\r\n              <Skeleton height={10} />\r\n            </Typography>\r\n          </CardActions>\r\n          <div className=\"border\" />\r\n          <CardActions sx={{ padding: \"0\" }}>\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              component=\"h6\"\r\n              color=\"#838383\"\r\n              sx={{ flexGrow: 1 }}\r\n            >\r\n              <Skeleton width={60} />\r\n            </Typography>\r\n          </CardActions>\r\n        </CardContent>\r\n      </Card>\r\n    </span>\r\n  ));\r\n};\r\n\r\nexport default ResPlaceholder;\r\n","import { Typography, Grid, Pagination, Button } from \"@mui/material\";\r\nimport { Container } from \"@mui/system\";\r\nimport React, { useState } from \"react\";\r\nimport Layout from \"../components/layouts/Layout\";\r\nimport ProductFlatCard from \"../components/products/ProductFlatCard\";\r\nimport Breadcrumbs from \"../components/breadcrumbs\";\r\nimport * as api from \"../utils/api\";\r\nimport ResPlaceholder from \"../components/placeholders/ResPlaceholder\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Highlighter from \"react-highlight-words\";\r\nimport Nofound from \"./Nofound\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst RestaurantsListing = () => {\r\n  const { t } = useTranslation();\r\n  const [restaurants, setRestaurants] = useState();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [per_page] = useState(8);\r\n  const [page, setPage] = useState(1);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const city = localStorage.getItem(\"city\");\r\n  const [foodType, setFoodType] = useState(\"\");\r\n\r\n  const handlePageChange = (event, selectedPage) => {\r\n    if (currentPage !== selectedPage) {\r\n      const offset = (selectedPage - 1) * per_page;\r\n      setLoading(true);\r\n      setCurrentPage(selectedPage);\r\n      get_restaurants(offset, foodType);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    get_restaurants();\r\n    // eslint-disable-next-line\r\n  },[]);\r\n  \r\n  const get_restaurants = (offset = 0, food_type) => {\r\n    api\r\n      .get_partners(\"\", \"\", city, food_type, \"\", per_page, offset)\r\n      .then((response) => {\r\n        var totalPages = parseInt(response.total) / per_page;\r\n        totalPages = Math.ceil(totalPages);\r\n        setPage(totalPages);\r\n        setLoading(false);\r\n        setRestaurants(response.data);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Layout title={t(\"Restaurants_crumb\")}>\r\n      <Breadcrumbs\r\n        title={t(\"Restaurants_crumb\")}\r\n        crumb={t(\"Restaurants_crumb\")}\r\n      />\r\n      {restaurants && restaurants !== null && city !== null ? (\r\n        <>\r\n          <Container>\r\n            <div className=\"title-wrapper\">\r\n              <Typography variant=\"h4\" component=\"h4\" className=\"bold\">\r\n                <Highlighter\r\n                  highlightClassName=\"highlight\"\r\n                  searchWords={[\"Restaurants\"]}\r\n                  autoEscape={true}\r\n                  textToHighlight={t(\"top_restaurants\")}\r\n                />\r\n              </Typography>\r\n              <Typography>{t(\"top_most_restaurants\")}</Typography>\r\n            </div>\r\n            <div className=\"restaurants-filter mb20 filter\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"error\"\r\n                sx={{ mr: \"10px\" }}\r\n                className={foodType === \"\" ? \"active\" : \"\"}\r\n                onClick={() => {\r\n                  setFoodType(\"\");\r\n                  setCurrentPage(1);\r\n                  get_restaurants(\"\", \"\");\r\n                }}\r\n              >\r\n                All\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"error\"\r\n                sx={{ mr: \"10px\" }}\r\n                className={foodType === 1 ? \"active\" : \"\"}\r\n                onClick={() => {\r\n                  setFoodType(1);\r\n                  setCurrentPage(1);\r\n                  get_restaurants(\"\", 1);\r\n                }}\r\n              >\r\n                Vegetarian\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"error\"\r\n                sx={{ mr: \"10px\" }}\r\n                className={foodType === 2 ? \"active\" : \"\"}\r\n                onClick={() => {\r\n                  setFoodType(2);\r\n                  setCurrentPage(1);\r\n                  get_restaurants(\"\", 2);\r\n                }}\r\n              >\r\n                Non Vegetarian\r\n              </Button>\r\n            </div>\r\n            <div className=\"restaurants-list-wrapper\">\r\n              {restaurants && restaurants !== null && city !== null ? (\r\n                <>\r\n                  <Grid container spacing={2}>\r\n                    {isLoading ? (\r\n                      <ResPlaceholder number={8} />\r\n                    ) : (\r\n                      <>\r\n                        {restaurants &&\r\n                          restaurants.map((product, index) => {\r\n                            const {\r\n                              partner_id,\r\n                              partner_name,\r\n                              partner_profile,\r\n                              description,\r\n                              partner_rating,\r\n                              partner_cook_time,\r\n                              slug,\r\n                              is_restro_open,\r\n                              price_for_one,\r\n                              partner_indicator,\r\n                              is_favorite\r\n                            } = product;\r\n                            return (\r\n                              <Grid\r\n                                item\r\n                                xl={3}\r\n                                key={index}\r\n                                className=\"res-card\"\r\n                              >\r\n                                <ProductFlatCard\r\n                                  title={partner_name}\r\n                                  image={partner_profile}\r\n                                  des={description}\r\n                                  rating={partner_rating}\r\n                                  cooking_time={partner_cook_time}\r\n                                  slug={slug}\r\n                                  open={is_restro_open}\r\n                                  price={price_for_one}\r\n                                  partner_indicator={partner_indicator}\r\n                                  is_favorite={is_favorite}\r\n                                  type=\"partners\"\r\n                                  type_id={partner_id}\r\n                                />\r\n                              </Grid>\r\n                            );\r\n                          })}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div>\r\n                    <div className=\"not-found-res\">\r\n                      <img\r\n                        src={process.env.PUBLIC_URL + \"/images/oopsie.gif\"}\r\n                        alt=\"not-found\"\r\n                      />\r\n                    </div>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      component=\"h5\"\r\n                      sx={{ textAlign: \"center\" }}\r\n                    >\r\n                      sorry, online ordering isn't available at your location.\r\n                    </Typography>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"pagination\">\r\n              <Pagination\r\n                count={page}\r\n                color=\"error\"\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                onChange={handlePageChange}\r\n                page={currentPage}\r\n              />\r\n            </div>\r\n          </Container>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Nofound />\r\n        </>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default RestaurantsListing;\r\n"],"names":["n","number","Array","map","elem","index","variant","sx","maxWidth","borderRadius","marginRight","marginBottom","marginTop","transition","transform","className","height","width","component","color","padding","flexGrow","t","useTranslation","useState","restaurants","setRestaurants","isLoading","setLoading","per_page","page","setPage","currentPage","setCurrentPage","city","localStorage","getItem","foodType","setFoodType","useEffect","get_restaurants","offset","food_type","api","then","response","totalPages","parseInt","total","Math","ceil","data","title","crumb","highlightClassName","searchWords","autoEscape","textToHighlight","mr","onClick","container","spacing","product","partner_id","partner_name","partner_profile","description","partner_rating","partner_cook_time","slug","is_restro_open","price_for_one","partner_indicator","is_favorite","item","xl","image","des","rating","cooking_time","open","price","type","type_id","src","alt","textAlign","count","shape","onChange","event","selectedPage"],"sourceRoot":""}